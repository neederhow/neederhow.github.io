<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[ubuntu美化记录]]></title>
    <url>%2F2018%2F07%2F16%2Fubuntu-be-pretty%2F</url>
    <content type="text"><![CDATA[pre 关于Ubuntu美化、个人定制、常用软件安装的记录 美化修改登录页面背景编辑 /etc/alternatives/gdm3.css 文件， 找到 1234#lockDialogGroup &#123; background: #2c001e url(resource:///org/gnome/shell/theme/noise-texture.png); background-repeat: repeat;&#125; 修改为 123456#lockDialogGroup &#123; background: #2c001e url(file:///path/to/the/picture/you/want/to.use); background-repeat: no-repeat; background-size: cover; background-position: center;&#125; 重启。 参考资料 Ubuntu18.04 更改登录界面默认背景图: https://zhuanlan.zhihu.com/p/36470249]]></content>
      <categories>
        <category>备忘</category>
      </categories>
      <tags>
        <tag>ubuntu linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Ubuntu杂记]]></title>
    <url>%2F2018%2F07%2F09%2Fubuntu-jottings%2F</url>
    <content type="text"><![CDATA[pre 基于Ubuntu记一些关于Linux使用的内容 命令文件与目录chmodchmod命令用来变更文件或目录的权限。 权限范围的表示法如下: u User，即文件或目录的拥有者；g Group，即文件或目录的所属群组；o Other，除了文件或目录拥有者或所属群组之外，其他用户皆属于这个范围；a All，即全部的用户，包含拥有者，所属群组以及其他用户；r 读取权限，数字代号为“4”;w 写入权限，数字代号为“2”；x 执行或切换权限，数字代号为“1”；- 不具任何权限，数字代号为“0”；s 特殊功能说明: 变更文件或目录的权限。 语法chmod (选项)(参数) 选项 -c或–changes: 效果类似“-v”参数，但仅回报更改的部分；-f或–quiet或–silent: 不显示错误信息；-R或–recursive: 递归处理，将指令目录下的所有文件及子目录一并处理；-v或–verbose: 显示指令执行过程；–reference=&lt;参考文件或目录&gt;: 把指定文件或目录的所属群组全部设成和参考文件或目录的所属群组相同；&lt;权限范围&gt;+&lt;权限设置&gt;: 开启权限范围的文件或目录的该选项权限设置；&lt;权限范围&gt;-&lt;权限设置&gt;: 关闭权限范围的文件或目录的该选项权限设置；&lt;权限范围&gt;=&lt;权限设置&gt;: 指定权限范围的文件或目录的该选项权限设置； 参数 权限模式: 指定文件的权限模式；文件: 要改变权限的文件。 知识扩展和实例 Linux用 户分为: 拥有者、组群(Group)、其他（other），Linux系统中，预设的情況下，系统中&gt;所有的帐号与一般身份使用者，以及root的相关信 息， 都是记录在/etc/passwd文件中。每个人的密码则是记录在/etc/shadow文件下。 此外，所有的组群名称记录在/etc/group內！ 举个栗子1234-rw-r--r-- 1 owner group 8.8K 4月 2 2017 examplesdrwxrwxr-x 3 owner group 4.0K 5月 15 2017 examplesDirectory~ chmod -c u+x examplesmode of 'examples' changed from 0644 (rw-r--r--) to 0744 (rwxr--r--) 解释上面修改了examples的拥有者权限,增加了执行权限-普通文件(目录为d)rw-文件拥有者u的权限r--所属组g的权限r--拥有者及所在组之外的o的权限 1文件数 owner文件拥有者 group所属组 8.8K大小 4月 2 2017最后修改时间 examples文件名chmod命令 -c选项: 显示改变的地方 u+x参数 examples目标修改文件 chownchown命令用来变更文件或目录的拥有者或组。只有root权限才有资格运行chown 语法chown(选项)(参数) 选项 -c或–changes: 效果类似“-v”参数，但仅回报更改的部分；-f或–quite或——silent: 不显示错误信息；-h或–no-dereference: 只对符号连接的文件作修改，而不更改其他任何相关文件；-R或–recursive: 递归处理，将指定目录下的所有文件及子目录一并处理；-v或–version: 显示指令执行过程；–dereference: 效果和“-h”参数相同；–help: 在线帮助；–reference=&lt;参考文件或目录&gt;: 把指定文件或目录的拥有者与所属群组全部设成和参考文件或目录的拥有者与所属群组相同；–version: 显示版本信息。 参数 用户:组: 指定所有者和所属工作组。当省略“:组”，仅改变文件所有者；文件: 指定要改变所有者和工作组的文件列表。支持多个文件和目标，支持shell通配符。 举个栗子123-rw-r--r-- 1 owner group 8.8K 4月 2 2017 examples~ sudo chown -c $USER:$USER exampleschanged ownership of 'examples' from owner:group to user:user 后台运行&amp;加在一个命令的最后，可以把这个命令放到终端后台执行(关闭终端，命令终止)。1~ ./examples &amp; 然而如果命令有输出，会输出到终端，干扰使用也违背了将它放在后台运行的初衷。1~ ./examples &gt; out.file 2&gt;&amp;1 &amp; 解释 ./examples &gt; out.file是将./examples的输出重定向到out.file文件(文件名自定义)，即不打印到终端屏幕上。 2&gt;&amp;1是将标准出错重定向到标准输出，这里的标准输出已经重定向到了out.file文件，即将标准出错也输出到out.file文件中。 &amp;是让该命令在后台执行。 特别要说明的 2&gt;1，2与&gt;结合代表错误重定向，而1则代表错误重定向到一个文件1而非代表标准输出；换成2&gt;&amp;1，&amp;与1结合才代表标准输出。 ctrl + z可以将一个正在前台执行的命令放到后台，并且处于暂停状态。1234~ ./examplessome output...^Z[1] + 22668 suspended ./examples [1]是当前在后台运行的命令的编号,22668是该进程的pid,suspended命令状态,./examples命令。 jobs查看当前有多少在后台运行的命令 jobs -l选项可显示所有任务的PID，jobs的状态可以是running, stopped, Terminated。如果任务被终止了（kill）会从当前的列表中删除任务的进程标识。1234~ jobs[1] + suspended ./examples~ jobs -l[1] + 22668 suspended ./examples fg将后台中的命令调至前台继续运行。如果后台中有多个命令，可以用fg %jobnumber（是命令编号，不是进程号）将选中的命令调出。12~ fg %1[1] + 22668 continued ./examples bg将一个在后台暂停的命令，变成在后台继续执行。如果后台中有多个命令，可以用bg %jobnumber将选中的命令调出。123456[1] + 22668 suspended ./examples~ bg %1[1] + 22668 continued ./examples~ jobs[1] + running ./examples~ nohup如果让程序始终在后台执行，即使关闭终端也执行，这时候需要nohup。该命令可以在你退出帐户/关闭终端之后继续运行相应的进程。关闭中断后，在另一个终端jobs已经无法看到后台跑得程序了，此时利用ps（进程查看命令） 语法nohup(选项)(参数) 选项 –help：在线帮助；–version：显示版本信息。 参数 程序及选项：要运行的程序及选项。 使用nohup命令提交作业，如果使用nohup命令提交作业，那么在缺省情况下该作业的所有输出都被重定向到一个名为nohup.out的文件中，除非另外指定了输出文件：1~ nohup ./examples &gt; out.file 2&gt;&amp;1 &amp; Ctrl+c终止前正在运行的命令 kill 通过jobs命令查看job号kill %1 通过ps命令查看job的进程号kill 22668 进程查与杀查ps程是否结束、进程有没有僵死、哪些进程占用了过多的资源等等，总之大部分信息都是可以通过执行该命令得到的。 语法ps(选项) 选项由于ps命令能够支持的系统类型相当的多选项多的离谱,就放几个常用的。 -a 显示同一终端下的所有程序-A 显示所有进程-e 等于“-A”e 显示环境变量f 显示程序间的关系u 指定用户的所有进程-au 显示较详细的资讯-aux 显示所有包含其他使用者的行程 12345~ ps -ef #显示所有进程信息，连同命令行UID PID PPID C STIME TTY TIME CMDroot 1 0 0 00:02 ? 00:00:11 /sbin/init splashroot 2 0 0 00:02 ? 00:00:00 [kthreadd]... UID用户ID，PID进程ID，PPID父进程ID，CCPU占用比，STIME开始时间，TTY登录者的终端位置(?与终端机无关，tty1-tty6是本机上面的登录者的程序，pts/0等表示为由网络连接进主机的程序)，TIMECPU使用时间，CMD命令。1234~ ps -l #将目前属于您自己这次登入的 PID 与相关信息列示出来F S UID PID PPID C PRI NI ADDR SZ WCHAN TTY TIME CMD0 S 1000 14110 14103 0 80 0 - 11776 sigsus pts/1 00:00:00 zsh4 R 1000 14215 14110 0 80 0 - 7668 - pts/1 00:00:00 ps F代表这个程序的旗标 (flag)， 4 代表使用者为 super userS代表这个程序的状态 (STAT)，关于各 STAT 的意义将在内文介绍PRI这个是 Priority (优先执行序) 的缩写，详细后面介绍NI这个是 Nice 值ADDR这个是 kernel function，指出该程序在内存的那个部分。如果是个 running的程序，一般就是 “-“SZ使用掉的内存大小WCHAN目前这个程序是否正在运作当中，若为 - 表示正在运作12345~ ps auxUSER PID %CPU %MEM VSZ RSS TTY STAT START TIME COMMANDroot 1 0.1 0.0 225604 7124 ? Ss 00:02 0:11 /sbin/init splaroot 2 0.0 0.0 0 0 ? S 00:02 0:00 [kthreadd]... VSZ占用的虚拟内存量，RSS占用的固定的内存量，STAT目前的状态（R正在运行或者可被运行，S正在睡眠(可说是 idle 状态)可被某些讯号(signal)唤醒，T正在侦测或以停止，Z已经终止并释放资源，但是其父程序无法正常的终止它，处于僵尸状态）1～ ps -o stat,ppid,pid,cmd #定制输出项 用|与grep、more等连用进行筛选、分页ps &gt; file将结果输出的file文件pidofpidof命令用于查找指定名称的进程的进程号id号。 语法pidof(选项)(参数) 选项 -s：仅返回一个进程号；-c：仅显示具有相同“root”目录的进程；-x：显示由脚本开启的进程；-o：指定不显示的进程ID。 参数进程名称：指定要查找的进程名称。 123456~ pidof nginx13312 5371~ pidof crond1509~ pidof init1 pgreppgrep命令以名称为依据从运行进程队列中查找进程，并显示查找到的进程id。每一个进程ID以一个十进制数表示，通过一个分割字符串和下一个ID分开，默认的分割字符串是一个新行。对于每个属性选项，用户可以在命令行上指定一个以逗号分割的可能值的集合。 语法pgrep(选项)(参数)选项 -o：仅显示找到的最小（起始）进程号；-n：仅显示找到的最大（结束）进程号；-l：显示进程名称；-P：指定父进程号；-g：指定进程组；-t：指定开启进程的终端；-u：指定进程的有效用户ID。 参数进程名称：指定要查找的进程名称，同时也支持类似grep指令中的匹配模式。 12345678910111213141516171819202122~ pgrep -lo httpd4557 httpd~ pgrep -ln httpd4566 httpd~ pgrep -l httpd4557 httpd4560 httpd4561 httpd4562 httpd4563 httpd4564 httpd4565 httpd4566 httpd~ pgrep httpd45574560456145624563456445654566 pstreepstree命令以树状图的方式展现进程之间的派生关系，显示效果比较直观。 语法pstree(选项)选项 -a：显示每个程序的完整指令，包含路径，参数或是常驻服务的标示；-c：不使用精简标示法；-G：使用VT100终端机的列绘图字符；-h：列出树状图时，特别标明现在执行的程序；-H&lt;程序识别码&gt;：此参数的效果和指定”-h”参数类似，但特别标明指定的程序；-l：采用长列格式显示树状图；-n：用程序识别码排序。预设是以程序名称来排序；-p：显示程序识别码；-u：显示用户名称；-U：使用UTF-8列绘图字符；-V：显示版本信息。 显示当前所有进程的进程号和进程idpstree -p显示所有进程的所有详细信息，遇到相同的进程名可以压缩显示。pstree -a 杀killkill命令用来删除执行中的程序或工作。kill可将指定的信息送至程序。预设的信息为SIGTERM(15),可将指定程序终止。若仍无法终止该程序，可使用SIGKILL(9)信息尝试强制删除程序。程序或工作的编号可利用ps指令或job指令查看。 语法kill(选项)(参数) 选项 -a：当处理当前进程时，不限制命令名和进程号的对应关系；-l &lt;信息编号&gt;：若不加&lt;信息编号&gt;选项，则-l参数会列出全部的信息名称；-p：指定kill 命令只打印相关进程的进程号，而不发送任何信号；-s &lt;信息名称或编号&gt;：指定要送出的信息；-u：指定用户。 参数 进程(pid、ppid)或作业识别号：指定要删除的进程或作业。 所有信号名称：1234567891011121314151617 kill -l 1) SIGHUP 2) SIGINT 3) SIGQUIT 4) SIGILL 5) SIGTRAP 6) SIGABRT 7) SIGBUS 8) SIGFPE 9) SIGKILL 10) SIGUSR1 11) SIGSEGV 12) SIGUSR213) SIGPIPE 14) SIGALRM 15) SIGTERM 16) SIGSTKFLT17) SIGCHLD 18) SIGCONT 19) SIGSTOP 20) SIGTSTP21) SIGTTIN 22) SIGTTOU 23) SIGURG 24) SIGXCPU25) SIGXFSZ 26) SIGVTALRM 27) SIGPROF 28) SIGWINCH29) SIGIO 30) SIGPWR 31) SIGSYS 34) SIGRTMIN35) SIGRTMIN+1 36) SIGRTMIN+2 37) SIGRTMIN+3 38) SIGRTMIN+439) SIGRTMIN+5 40) SIGRTMIN+6 41) SIGRTMIN+7 42) SIGRTMIN+843) SIGRTMIN+9 44) SIGRTMIN+10 45) SIGRTMIN+11 46) SIGRTMIN+1247) SIGRTMIN+13 48) SIGRTMIN+14 49) SIGRTMIN+15 50) SIGRTMAX-1451) SIGRTMAX-13 52) SIGRTMAX-12 53) SIGRTMAX-11 54) SIGRTMAX-1055) SIGRTMAX-9 56) SIGRTMAX-8 57) SIGRTMAX-7 58) SIGRTMAX-659) SIGRTMAX-5 60) SIGRTMAX-4 61) SIGRTMAX-3 62) SIGRTMAX-263) SIGRTMAX-1 64) SIGRTMAX 只有 第9种信号(SIGKILL) 才可以 无条件终止 进程kill -9 pid或kill -KILL pid，其他信号进程都有权利忽略，下面是常用的信号：1234567HUP 1 终端断线INT 2 中断（同 Ctrl + C）QUIT 3 退出（同 Ctrl + \）TERM 15 终止KILL 9 强制终止CONT 18 继续（与STOP相反， fg/bg命令）STOP 19 暂停（同 Ctrl + Z） killallkillall命令使用进程的名称来杀死进程，使用此指令可以杀死一组同名进程。我们可以使用kill命令杀死指定进程PID的进程，如果要找到我们需要杀死的进程，我们还需要在之前使用ps等命令再配合grep来查找进程，而killall把这两个过程合二为一，是一个很好用的命令。 语法killall(选项)(参数)选项 -e：对长名称进行精确匹配；-l：忽略大小写的不同；-p：杀死进程所属的进程组；-i：交互式杀死进程，杀死进程前需要进行确认；-l：打印所有已知信号列表；-q：如果没有进程被杀死。则不输出任何信息；-r：使用正规表达式匹配要杀死的进程名称；-s：用指定的进程号代替默认信号“SIGTERM”；-u：杀死指定用户的进程。 参数进程名称：指定要杀死的进程名称。 1~ kill examples pkillpkill命令可以按照进程名杀死进程。pkill和killall应用方法差不多，也是直接杀死运行中的程序；如果您想杀掉单个进程，请用kill来杀掉。 语法pkill(选项)(参数)选项 -o：仅向找到的最小（起始）进程号发送信号；-n：仅向找到的最大（结束）进程号发送信号；-P：指定父进程号发送信号；-g：指定进程组；-t：指定开启进程的终端。 参数进程名称：指定要查找的进程名称，同时也支持类似grep指令中的匹配模式。 123~ pgrep -l gaim2979 gaim~ pkill gaim 也就是说：kill对应的是PID，pkill对应的是command。 关于kill -9 pid无法强制杀掉进程的问题某些进程无法强制杀死 kill -9发送SIGKILL信号将其终止，但是以下两种情况不起作用： 该进程处于”Zombie”状态（使用ps命令返回defunct的进程）。此时进程已经释放所有资源，但还未得到其父进程的确认。”zombie”进程要等到下次重启时才会消失，但它的存在不会影响系统性能。 该进程处于”kernel mode”（核心态）且在等待不可获得的资源。处于核心态的进程忽略所有信号处理，因此对于这些一直处于核心态的进程只能通过重启系统实现。进程在AIX 中会处于两种状态，即用户态和核心态。只有处于用户态的进程才可以用“kill”命令将其终止。 杀死僵尸进程查 使用top命令查看: 第二行最后一列可以看到有几个zombie 使用ps -A -o stat,ppid,pid,cmd | grep -e &#39;^[Zz]&#39;命令 -A 参数列出所有进程-o 自定义输出字段 我们设定显示字段为 stat（状态）, ppid（进程父id）, pid(进程id)，cmd（命令）这四个参数 杀使用kill -HUP pid命令杀死僵尸进程,然后确认是否成功,若失败则通过杀死它的父进程来解决问题kill -HUP ppid。 一些问题IDEA无法更新更新时提示IDEA does not have write access to /path/to/idea. Please run it by a privileged user to update使用下面命令1sudo chown -R $USER: $USER /opt/path/to/idea 把目录的与拥有者改为当前用户 参考资料 Linux命令大全: http://man.linuxde.net 后台运行linux后台执行命令：&amp;和nohup: https://blog.csdn.net/liuyanfeier/article/details/62422742linux后台运行和关闭、查看后台任务: https://www.cnblogs.com/kaituorensheng/p/3980334.html 进程查与杀Ubuntu终止进程的方法(kill、pkill、killall): http://justcoding.iteye.com/blog/1931347linux下kill -9 pid 强制不能杀掉进程: https://blog.csdn.net/u010416101/article/details/72331799如何查找僵尸进程并Kill之，杀不掉的要查看父进程并杀之: https://blog.csdn.net/21aspnet/article/details/6754445]]></content>
      <categories>
        <category>备忘</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[系统总线]]></title>
    <url>%2F2017%2F12%2F27%2F%E7%B3%BB%E7%BB%9F%E6%80%BB%E7%BA%BF%2F</url>
    <content type="text"><![CDATA[pre 3.1总线的基本概念一、为什么用总线二、什么是总线总线是连接各个部件的信息传输线，是各个部件共享的传输介质 三、总线上的信息传送串行 发送方一次传一位,接收方一次收一位,可用于远距离数据传输。 并行 发送方一次传多位,接收方一次收多位,需要多条数据线,由于数据线平行向外,若传输距离过长,数据线间会彼此干扰,故并行传输用于短距离传输数据(机箱内)。 四、总线结构计算机举例1.单总线结构框图 缺点：由于同一时间只能有一对设备使用总线 当I/O设备与主存间传输信息时,CPU将停止 当设备较多时,与远端设备通讯延迟大 2.面向CPU的双总线机构框图 解决单总线的缺点缺点: 主存与外部设备通信需经过CPU,依然打断CPU的工作 3.以存储器为中心的双总线结构框图 3.2总线的类型1.片内总线芯片内部的总线 2.系统总线计算机各部件之间的信息传输线 1234567891011121314\begin&#123;cases&#125;\text&#123;数据总线&#125;&amp;\text&#123;传输数据,&#123;\bf&#123;双向&#125;&#125; 与机器字长、存储字长有关(小于或等于)&#125;\\\\\text&#123;地址总线&#125;&amp;\begin&#123;cases&#125;\text&#123;由CPU或主设备发出&#125;\\\\\text&#123;&#123;\bf&#123;单向&#125;&#125; 与存储地址、I/O地址有关&#125;\end&#123;cases&#125;\\\\\text&#123;控制总线&#125;&amp;\begin&#123;cases&#125;\text&#123;&#123;\bf&#123;有出&#125;&#125;(存储器读操作、写控制、总线允许、中断确认)&#125;\\\\\text&#123;&#123;\bf&#123;有入&#125;&#125;(中断请求、总线请求)&#125;\end&#123;cases&#125;\end&#123;cases&#125; 3.通信总线用于 计算机系统之间 或 计算机系统与其他系统(如仪表\移动通信)之间的通信 传输方式 串行通信总线 并行通信总线 3.3总线特性及性能指标一、总线物理实现 二、总线特性1、机械特性尺寸、形状、管脚数 及 排列顺序 2、电气特性传输方向 和有效的 电平 范围 3、功能特性每根传输线的功能 地址 数据 控制 4、时间特性信号的时序关系 三、总线的性能指标1、总线宽度数据线 的根数 2、标准传输率每秒传输的最大字节数(MBps) 3、时钟同步/异步4、总线复用地址线 与 数据线复用 5、信号线数地址线、数据线和控制线的总和 6、总线控制方式突发、自动、仲裁、逻辑、计数 7、其他指标负载能力 四、总线的标准| 系统标准 | 数据线 | 总线时钟(MHz) | 带宽(MBpz) ||:———-:|:—————:|:—————:|:—————-:|| ISA(工业标准体系结构) | 16 | 8(独立) | 16 || EISA | 32 | 8(独立) | 33 || VESA(VL-BUS)视频标准电子协会 | 32 | 32(CPU) | 132 || PCI(外设部件互联标准) | 32/64 | 33(独立) / 66(独立) | 132 / 528 || AGP | 32 | 66.7(独立) / 133(独立) | 266 / 533 || RS-232(串行通信总线) | 串行通信总线标准 | 数据终端设备(计算机)和数据通信设备(调制解调器)之间的标准接口 | || USB(通用串行总线) | 串行通信总线标准 | 普通无屏蔽双绞线 / 带屏蔽双绞线 | 1.5(USB1.0) / 12(USB2.0) / 480(USB2.0) | 3.4总线结构一、单总线结构 二、多总线结构1、双总线结构 2、三总线结构 DMA:直接存储器访问 3、另一种三总线结构 4、四总线结构 三、总线结构举例1、传统微型机总线结构 2、VL-BUS局部总线结构 3、PCI总线结构 3.5总线控制一、总线判优控制1、基本概念 主设备(模块)——对总线有控制权 从设备(模块)——响应从主设备发来的总线命令 总线判优控制 集中式 总线控制部件集中在一起 链式查询计数器定时查询独立请求查询 分布式 2、链式查询数据线：信息交换过程中数据的传输地址线：主设备占用总线后通过地址总线找到从设备BR(BusRequest总线请求)：所有设备通过这条线发出总线占用、总线使用的请求BS(BusState总线状态)：如果有设备占用了总线则通过这条线通知控制部件BG(BusGrant总线响应)：这是这种控制方式成为链式查询的原因，用于查询是哪个接口提出总线请求判优过程当IO接口通过BR发送总线请求后，BG线一个一个向下进行查询是哪个接口发送的IO请求，并将使用权交给第一个查询到的第一个接口；然后该接口通过BS设置总线忙，至此，接口获得总线使用权 特点: 结构简单 只有三条线用于控制、仲裁 增删设备简单 优先级算法简单 进行可靠性设计的时候比较容易实现 优先级取决于连接方法，事先决定，优先级越高越靠前 对电路故障敏感 3、计数器定时查询设备地址线：名称来源，线上地址由计数器给出判优过程总线控制部件中有个计数器，它被赋有一个初值。设备通过BR发出请求，若总线处于空闲状态则启动计数器。计数器的值通过设备地址线发出，假设初值为0，则对接口0进行查询，若非接口0发出的请求这计数器值加一，查询接口1，依次查询。若找到发出请求的接口，则该接口通过BS应答。 特点： 优先级灵活(由计数器初值决定) 较链式查询少了BG线多了设备地址线，他的宽度跟设备数有关,有n个设备，就需要$\log_2n$(向上取整)条线，即该方式共有$4+\log_2n$(向上取整)条线 4、独立请求查询前两种方法查找设备优先级是按顺序查找，速度慢若有n个设备则有$2+2n$ 判优过程每个IO接口有各自独立的BR和BG线，总线控制部件内置排队器对设备进行优先及排列。当多个设备通过各自的BR线将请求发动到总线控制部件后，排队器按照逻辑对请求进行排队，并给予其中一个设备响应 二、总线通信控制1、目的解决通信双方协调配合为题 2、总线传输周期 申请分配阶段 主模块申请，总线仲裁决定 寻址阶段 主模块向从模块给出地址和命令 传输阶段 主模块和从模块交换数据 结束阶段 主从模块撤销相关信息 3、总线通信的四种方式 同步通信 由统一时标控制数据传送 异步通信 采用应答方式，没用公共时钟标准 半同步通信 同步异步结合，解决高速设备与低速设备间通信问题 分离式通信 充分挖掘系统总线每个瞬间的价值 (1)同步式数据输入同步式特点：需要一个定宽定距的时钟信号，在固定的时间做特定的事 在T1上升沿必须给出地址信号(主设备给出) 在T2上升沿必须给出读信号，告诉从设备CPU将读取数据 在T3上升沿必须给出数据信号 在T4上升沿数据信号和读信号撤销 在T4结束地址信号撤销(2)同步式数据输出 在T1上升沿必须给出地址信号(主设备给出) 在T1下降沿必须给出数据 在T2上升沿必须给出写命令 在T3上升沿在进行写操作 在T4上升沿撤销数据信号和写命令 在T4结束撤销地址信号同步式特点：如果两个设备速度不同，按速度较低的设备的时钟周期进行传输。所以一般用于线路较短(线路太长时延大)，各设备速度比较接近的情况下(3)异步通信由请求线和应答线组成，利用请求和应答通信通信过程中如果发现设备有异常，可以要求重发不互锁(不可靠)主设备发出请求，从设备接收到请求后作出应答。主设备一段时间后撤销请求(不论是否接收到应答)，从设备一段时间后撤销应答(不管主设备是否接收到应答)。半互锁(请求信号有死锁的可能)主设备发出请求，从设备接收到请求后作出应答。主设备接收到应答后撤销请求，接收不到就保持。从设备一段时间后撤销应答(不管主设备是否接收到应答)。全互锁主设备发出请求，从设备接收到请求后作出应答。主设备接收到应答后撤销请求，只有主设备撤销以后，从设备才撤销应答信号。(4)半同步通信(同步、异步 结合)同步有一个定长定宽的时钟信号发送方用系统时钟前沿发信号接收方用系统时钟后沿判断、识别异步允许不同速度的模块和谐工作增加一条 “等待”响应 信号 $\overline{WAIT}$以输入数据为例的半同步通信时序在T1上升沿必须给出地址信号(主设备给出)在T2上升沿必须给出读命令CPU检测$\overline{WAIT}$信号当$\overline{WAIT}$低电平时，在$T_3$周期到来前插入一个$T_w$周期在进入下一个周期前再次检测$\overline{WAIT}$信号$\cdot$$\cdot$$\cdot$在某个$T_w$周期下降沿检测到$\overline{WAIT}$信号为低电平，$T_3$周期开始在T3上升沿在进行读操作在T4上升沿撤销读信号、数据信号在T4结束撤销地址信号上述三种通信的共同点一个总线传输周期(一输入数据为例) 主模块发地址、命令 占用总线 从模块准备数据 不占用总线 总线空闲 从模块向主模块发数据 占用总线(5)分离式通信充分挖掘系统总线每个瞬间的潜力一个总线的传输周期 123456\begin&#123;cases&#125;\text&#123;子周期1&#125;&amp;\text&#123;&#123;\bf&#123;主模块&#125;&#125;申请&#123;\bf&#123;占用总线&#125;&#125;，使用完后即&#123;\bf&#123;放弃总线&#125;&#125;的使用权&#125;\\\text&#123;子周期2&#125;&amp;\text&#123;&#123;\bf&#123;从模块&#125;&#125;申请&#123;\bf&#123;占用总线&#125;&#125;，将各种信息送至总线上&#125;\end&#123;cases&#125; 分离式通信特点 各模块有权申请占用总线 采用同步方式通信，不等对方回答 总线被占用时，无空闲]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>计算机组成原理</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[计算机系统的基本概念与发展]]></title>
    <url>%2F2017%2F11%2F30%2F%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%E4%B8%8E%E5%8F%91%E5%B1%95%2F</url>
    <content type="text"><![CDATA[pre 1.1计算机系统简介一、计算机的软硬件概念1、计算机系统 二、计算机系统的层次结构 应对系统复杂性的方法1————抽象 （隐藏不重要的细节） 抽象就是把一个问题或模型，以不同规则或方法所得出的不同的解（求解方法和解本身即抽象层），这些不同的解可以组合并还原成问题或模型的本身。抽象的意义是可以忽略不是求解过程中必需的解。例如要用计算机程序去模拟“人”，在描述了人的动作（饮食、思考、移动等）匹配设计要求后（如可完整表达“人”在坐下时候的动作），其他“人”的细节（躯干、器官、细胞活动乃至人际关系）都可以忽略，以集中设计需要的功能，并减低程序的复杂度。wiki抽象化 (计算机科学)) 三、计算机体系结构与计算机组成 计算机组成与计算机体系结构从研究内容上的区别 计算机组成 计算机体系结构 研究内容：定义了软硬件交界面，定义了软硬件各自实现的功能 定义：实现计算机体系结构所体现的属性（指令实现） 定义：程序员（机器语言程序员）所见的计算机系统的属性概念性的结构和功能特性（指令系统、数据类型、寻址技术、I/O机理） 1.2计算机的基本组成一、冯诺依曼计算机的特点离散变量自动电子计算机EDVAC（Electronic Discrete Variable Automatic Computer） 冯诺依曼计算机硬件框图1.由五大部件组成 控制器– 指挥程序的运行 运算器– 算术运算– 逻辑运算 存储器– 存放数据和程序 输入设备– 将信息转换成机器能识别的形式 输出设备– 将结果转换成人类能识别的形式 2.指令和数据以同等地位存于存储器中，可按地址寻访3.指令和数据用二进制表示4.指令由操作码和地址码组成5.存储程序（核心）6.以运算器为中心（系统瓶颈） 缺点 以运算器为中心 不具备层次结构二、计算机的硬件框图1.以存储器为中心的计算机硬件框图2.现代计算机硬件框图现代计算机硬件层次 ALU(Arithmetic Logic Unit)算数逻辑单元CU(Control Unit)控制单元CPU(Central Processing Unit)中央处理器 现代计算机硬件框图 应对系统复杂性的方法2————(3’y)–层次化（Hierachy)：将被设计系统划分多个模块或子模块–模块化（Modularity）：明确定义（well-defind）的功能和接口–规范化（Regularity）：模块更容易重用 三、计算机的工作步骤1.上机前的准备 建立数学模型 确定计算方法 编制结题程序–程序——运算所需的全部步骤,由指令构成–指令——每一个步骤–指令和数据都保存在存储器中 指令格式举例| 操作码 | 地址码 || :—: | :—: || 取数 | a || 000001 | 0000001000 | 2.计算机的解题过程（模型机）(1)存储器的基本组成存储体——存储单元——存储元件存储单元 存放一串二进制代码存储字 存储单元中二进制代码的组合存储字长 存储单元中二进制代码的位数,每一个存储单元赋予一个地址按地址寻访MAR(Memory Address Register) 存储器地址寄存器,反映存储单元的个数MDR(Memory Data Register) 存储器数据寄存器，反映存储字长 (2)运算器的基本组成及操作过程| ＊ | ACC | MQ| X ||:—:|:—:|:—:|:—:|| 加 | 被加数、和 | | 加数 || 减| 被减数、差| | 减数|| 乘| 乘积高位| 乘数、乘积低位| 被乘数|| 除| 被除数、余数| 商| 除数| ACC(Accumulator) 累加器MQ(Multiple—Quotient Register) 存放乘数与商，称为乘商寄存器 加法操作过程 指令| 加 | M ||:-:|:-:|初态 ACC 被加数[M]–&gt;X[ACC]+[M]–&gt;ACC 减法操作过程 指令| 减 | M ||:-:|:-:|初态 ACC 被减数[M]–&gt;X[ACC]-[M]–&gt;ACC 乘法操作过程 指令| 乘 | M ||:-:|:-:|初态 ACC 被乘数[M]–&gt;MQ[ACC]–&gt;Ｘ0–&gt;ACC[X]×[MQ]–&gt;ACC // MQ (//表示连接关系) 加法操作过程 指令| 除 | M ||:-:|:-:|初态 ACC 被除数[M]–&gt;X[ACC]÷[M]–&gt;MQ…ACC(余数) (3)控制器的基本组成 控制器的功能√解释指令√保证指令按序执行 PC(Program Counter) 程序计数器，存放当前欲执行的指令的地址IR(Instruction Register) 指令寄存器，存放当前欲执行的指令CU(Control Unit) 控制单元 (4)主机完成一条指令的过程以取数指令为例 1.PC将指令地址送给MAR2.MAR送给存储体3.存储体将取数指令送到MDR中4.MDR中的指令送到IR5.将IR中的操作码送入CU6.将IR中的地址码送入MAR7.MAR将地址码送给存储体8.存储体将操作数送到MDR中9.MDR将操作数送入ACC (5)ax^2+bx+c程序的运行过程 将程序通过输入设备送至计算机 程序首地址–&gt;PC 启动程序运行 取指令PC–&gt;MAR–&gt;M–&gt;MDR–&gt;IR，(PC)+1–&gt;PC 分析指令OP(IR)–&gt;CU OP(IR)表示IR中的操作码 执行指令Ad(IR)–&gt;MAR–&gt;M–&gt;MDR–&gt;ACC Ad(IR)表示IR中的地址码 … 打印结果1.3计算机硬件的主要技术指标计算机硬件的主要技术指标1机器字长CPU一次能处理的数据的位数与CPU中的寄存器有关2.运算速度主频核数，每个核支持的线程数吉普森法$$T_M=\sum^n_{i=1} f_it_i$$ f为指令频率，t为指令时间 CPI执行一条指令所需的时钟周期数MIPS每秒执行百万条指令数FLOPS每秒浮点运算数3.存储容量存放二进制信息的总位数主存容量 存储单元个数×存储字长–MAR×MDR–$10\times8$ –&gt; $1K\times8$位–$16\times32$ –&gt; $62K\times32$位 字节数–$2^{13}b$ –&gt; 1KB–$2^{21}b$ –&gt; 256KB 辅存容量 字节数–80GB $1K=2^{10}$$1B=2^3b$$1GB=2^{30}B$ 2.1计算机的发展史一、计算机的产生和发展 1946年 美国ENIAC十进制运算| | ||:—|:—|| 18 000 | 多个电子管|| 1 500 | 多个继电器|| 150| 千瓦|| 30 | 吨|| 1 500| 平方英尺|| 5 000| 次加法/秒|手工扳动开关和插拔电缆来编程 现代计算机产生的驱动力 需求、需求、以及需求 技术发展–电子技术的发展–计算机体系结构技术的发展硬件技术对计算机更新换代的影响| 代 | 时间 | 硬件技术 | 速度(次/秒) ||:–:|:———:|:—————-:|:———–:|| 一 | 1946-1957 | 电子管 | 40 000 || 二 | 1958-1964 | 晶体管 | 200 000 || 三 | 1965-1971 | 中小规模集成电路 | 1 000 000 || 四 | 1972-1977 | 大规模集成电路 | 10 000 000 || 五 | 1978-现在 | 超大规模集成电路 | 100 000 000 | IBM System/360二、微型计算机的出现和发展微处理器芯片 1971年存储器芯片 1970年 More定律 Gordon Moore——Intel公司的缔造者之一 内容为:集成电路上可容纳的晶体管数目，约每隔两年便会增加一倍 经常被引用的“18个月”，是由英特尔首席执行官大卫·豪斯（David House）所说：预计18个月会将芯片的性能提高一倍（即更多的晶体管使其更快）。 这是一个观测或推测,而非物理或自然法则 2010年国际半导体技术发展路线图的更新增长已经在2013年年底放缓；又比如说英特尔在22奈米跟14奈米的CPU制程上已经放慢了技术更新的脚步，之后的时间里，晶体管数量密度预计只会每三年增加一倍。 维基百科-摩尔定律 三、软件技术的兴起和发展1.各种语言机器语言 -&gt; 面向机器汇编语言 -&gt; 面向机器高级语言 -&gt; 面向问题 2.系统软件语言处理程序: 汇编程序 编译程序 解释程序操作系统: DOS、UNIX、Windows、Linux服务器性程序数据库管理系统网络软件 3.软件发展的特点(1).开发周期长(2).制作成本昂贵(3).检测软件产品质量的特殊性 软件是程序及开发、使用 和 维护 程序所需的所有文档 2.2计算机的应用一、科学计算和数据处理科学计算 核爆模拟 行星模型 … 数据处理 民航 银行 …二、工业控制和实时控制实时控制 无人驾驶 …三、网络技术1.电子商务2.网络教育3.敏捷制造四、虚拟现实五、办公自动化和管理信息系统六、CAD、CAM、CIMS计算机辅助设计计算机辅助制造计算机集成制造系统七、多媒体技术八、人工只能2.3计算机的展望一、计算机具有类似人脑的一些超级智能功能要求计算机的速度足够快二、芯片集成度的提高受一下三方面的限制 芯片集成度点后物理极限的制约 按几何级数递增的制作成本 芯片的功耗、散热、线延迟三、？替代传统的硅芯片1.光计算机利用光子取代电子进行运算和存储2.DNA生物计算机通过控制DNA分子间的生化反应3.量子计算机利用量子所具有的量子特性]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>计算机组成原理</tag>
      </tags>
  </entry>
</search>
